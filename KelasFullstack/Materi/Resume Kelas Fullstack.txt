=========================== 1 Algoritma
==============================================================

- algoritma adalah susunan langkah2 dalam menyelesaikan suatu permasalahan
- algoritma bisa disajikan dengan berbagai cara beberapa diantaranya dengan flowchart (diagram alir), pseudocode dan lain2
- karakeristik algoritma yaitu :
1. terbatas (finitnes) : jumlah dari suatu algoritma memiliki batas
2. unambogous/terdefenisi : suatu pemrograman haruslah mudah dipahami dan terhindar dari ambiguitas
3. memiliki input dan output : suatu algoritma harus memnghasilkan output
4. efektif

********** bahasa pemrograman : adalah intruksi standar agae komputer bisa menjalankan suatu fungsi
- generasi pemrograman, saat ini generasi pemrograman sudah mencapai generasi ke-5
- proses pembuatan program : yaitu dengan interpreter, compiler, compiler dan interpreter
- struktur dasar algoritma : 
1. urutan (sequential) : rogram yang dieksekusi secara berurutan, pada dasarnya suatu pemrogrman di ekseskusi dengan cara sequential
2. pemilihan (seleksi) : biasanya disebut percabangan
3. perulangan (loop)

********** Variabel dan tipe data :
- variabel adalah pengenal/ identifier untuk mewakili suatu nilai tertentu
- aturan penamaan variabel : 
1. nama variabel boleh gabungan huruf dan angka, tetapi tidak boleh diawali angka
2. tidak boleh ada spasi
3. tidak boleh ada symbol khusus kecuali underscore
4. jumlah karakter bebas tapi hanya 32 karakter pertama yang terpakai

- tipa data : adalah nilai yang dapat ditampung oleh suatu variabel
- tipe data dibagi menjadi 2 : tipe data standar dan tipe data terstruktur
1. tipe data standar : tipe data dasar yang sering digunakan atau sering disebut tipe data primitif, contohnya : integer, bilangan real, char, string, boolean
2. tipe data tersturktur : adalah tipe data yang bisa menampung banyak tipe data, contohnya : array, record, file, set, pointer

********** Operator
- simbol dalam program yang digunakn untuk memanipulasi nilai
- dibagu menjadi 3 : 
1. Operator aritmatika
   diantaranya, +, -, *, /, %. //
2. operator logika
   untuk menghubungkan 2 atau lebih untuk menghasilkan nilai true or false, contonya
   and, or, not
3. operator relasional
  - adalah operator yang digunakan untuk menghubunkan 2 variabel, contohnya =, <>, <, >, <=, >=

********** Nilai Variabel
- nilai dapat dimanipulasi dengan cara
1. mengisi nilai kedalam variabel / explisit
2. menuliskan ke piranti keluaran
3. diacu dari sutu proses perhitungan/operasi

- nilai dapat berupa
1. konstanta yg diisi langsung
2. isi yang disimpan oleh variabel/konstanta
3. hasil perhitungan suatu pehitungan/operasi

********** Mengenal pseudocode
- adalah salah satu cara penulisan algoritma yg hampir menyerupai bahasa pemrograman namun ditulis lebih sederhana dan menggunakan bahasa baku yg mudah dipahami
- struktur penulisan pseudocode
1. Bagian judul, diawali dengan kata "PROGRAM" kemudian diikuti dengan nama algoritma.
2.Bagian deklarasi, digunakan untuk mendeklarasiakn variabel2 yg akan digunakan dalam algoritma dan jenisnya
3. Bagian isi, bagian ini merupakan bagian utama dari jalnnya algoritma

- contoh pseudocode menghitung luas persegi panjang
* PROGRAM CariLuasPersegiPanjang
  DEKLARASI
  int p,l
  float hasil

  ALGORITMA
  real(p,l)
  hasil = p*l
  write("Hasil = ",hasil)

********** Kondisi Percabangan/pemilihan
* ROGRAM AlgoritmaBeliSepatu
  DEKLARASI 
  budget: int <- 1000000
  hargaSepatu1 : int <- 1200000
  hargaSepatu2 : <= 900000

  ALGORITMA
  pergiKeAdadosStore()
  if hargaSepatu1 < budget then
     beliSepatu1()
  else beliSepatu2()

********** Struktur Percabangan/pemilihan
- struktur pemrograman yang melakukan proses pengujian untuk mengambil suatu keputusan dala mengeksekusi atau tidak mengeksekusi sebuah kode pemrograman
- struktur percabangan ditulis dengan IF, ELSE,IF dan (ELSE IF)
-  macam2 struktur if : if satu kondisi, if 2 kondisi dan if banyak kondisi (nested)

********** Mengenali Pola perulangan
********** Struktur Perulangan
- intruksi khusus dalam sebuah pemrogrman yang jumlahnya ditentukan, tujuannya untuk memprsingkat pemrogrman
- bentuk instruksi perulangan 
1. perulangan menggunakan for,
   terdiri dari 2, perulagan for..to..do atau perulangan positif dan perulangan for...downto..do atau perulgan negatif yaitu nilai dari varibel yang berkurang
   contoh pada javascript : 
   * (for let i=0;i<=10;i++)
2. perulangan menggunakan while do,
   * perulangan yang dilakukan pada suatu state selama bernilai/ kondisi benar, harus 
     ada kondisi agar tidak terjadi infinite loop
3. perulangan menggunakan repeat until
   - kebalikan dari while, perulangan repeat adalah perulangan selama kondisi berniali false

- penggunaan perulangan tergantung dengan kondisi/permasalah yang dihadapi

********** Prosedur 
1. Prosedur adalah program kecil yang berada didalam program utama yg digunakan untuk menyelesaikan masalah khusus. 
2. parameter : adalah data masukkan untuk subprogram yang nantinya akan di proses
3. paramter aktual : parameter yg dipakai ketika prosedur dipanggil biasanya disebut argumen

********** Fungsi
- program kecil atau subprogram yg berada didalam progrma utama untuk menyelesaikan permasalahan khusus yang mengembalikan nilai, baik  dengan atau tanpa parameter
- berdasarkan ruang lingkupnya variabel dibagi menjadi 2:
1. variabel local
   * variabel yg hanya bisa diakses didala fungsi induk
2. variabel global
   * variabel yang dapat diakses oleh semua prosedur atau diseluruh state

- keutungan memakai fungsi atau prosedur, diantaranya adalah : 
1. mengurangi tugas pemrograman menjadi langkah2 yg lebih sederhana dan kecil
2. mengurangi duplikasi kode (kode sama yg ditulis berulang)
3. dapat menggunakan kode program yg ditulis dalam berbagai program berbeda
4. memecah program besar menjadi kecil sehingga dapat dikerjakan oleh beberapa programmer
5. menyembunyikan informasi user sehingga menghindari perubahan logika dan perhitungan dalam suatu program
6. mengingkatkan pelacakan error pada saat menjalankan program

=========================== 2 Struktur Data
==============================================================

********** Struktur data array
- sebuah tipe data terstruktur yangbisa menyimpan banyak data dengan tipe yang sama ataupun berbeda
- contoh penulisan array pada js : let mahasiswa = ["fahmi","hidayat","leo","ronaldo"];
- cara mengaksea arraya : mahasiswa[0];

********** Struktur data Linked List
- adalah bentuk struktur data yang tersusun secara sekuensial, terhubung, dinamis dan terbatas, suatu simpul node yang dikaitkan dengan simpul lain dalam urutan tertentu
- masing2 elemen disimpan dalam node yang memuat nillai dan pointer link yg memuat ke alamat selanjutnya, setiap node menunjuk ke node selanjutnya.
- node pertama yg digunakan referensi untuk proses transfering disebut head dan node terakhir disebut null

********** Struktur data Stack dan queue
- stack adalah tumpukan atau struktur data dinamis yang mengikuti prinsip last in first out (LIFO) artinya item terakhir yang disertakan dalam stack aka menjadi item pertama yg dihilangkan dari stack.
- sifat2 stack
1. struktur dinamis
2. tidak memiliki ukuran tetap
3. tidak menggunakan kapasitas tetap memori
4. ukuran stack berubah dengan tiap operasi push() dan pop()

- queue : adalah strurktur data yg mengikuti prinsip first in first out (FIFO) fungsi2 yg didukung queue
1. Enqueue : menambhakan elemen dari sisi belakang hanya jika elemen tidak penuh
2. Dequeue : menghapus elemen dari sisi depan queue hanya jika queue tidak kosong

********** Struktur Data Binary Tree dan Graph
- Binary tree : struktur data yang memiliki pola percabangan tidak seperti array, linked list, stack dan queue yang memiliki pola struktur data linear
- bentuk percabangan yang maksimal memiliki dua chilren dari setiap parent-nya
- element paling atas disebut root, dan elemnt paling bawah yang tidak memiliki anak disebut leaves
- elemen parent adalah lement dengan tingkatan 1 level lebih tinggi dari eleng children
- element children 1 level dibawah parent

- alasan menggunakan struktur data tree
1. menyimpan struktur data bentuk tree/pohon, contohnya file sistem komputer
2. struktur data tree berada pada level menenengah untuk pemrosesan akses atau search (lebih cepat dari linked list dan lebih lambat dari array)
3. level menengah untuk proses insert dan hapus lemen (lebih cepat dari array dan lebih linked list tidak berurut)
4. sama seerpti linked list dan tidak seperti array, struktur data tidak perlu mengalokasikan ukuran maksimal elemen karena setiap node dihubungkan dengan menggunakan pointer

- stuktur data graph , representasi gambar dari set objek yangsaling terhubung
- graph dibagi menjadi 3 :
1. grap berarah : graph yg tepinya memiliki arah
2. grap tidak berarah : graph yg tepinya memiliki arah
3. graph berbobot : graph yg tepinya memiliki bobot atau memeiliki nilai setiap tepinya

=========================== 3 Penerapan algoritma
==============================================================

********** Algoritma pada pengurutan data
- pengurutan data sesuai kategori tertentu
- contoh pengaplikasan pada bubble sort

********** Pengurutan data dengan teknis selection sort
- terdapat beberapa metode pengurutan data, diantaranya bubble sort, selection sort, insertion sort, shell sort, merge sort, quick sort, dll
- selection sort, misalnya memilih element dengan nilai paling rendah dan menukar element yang terpilih dengan element ke-n

********** Pengurutan data dengan teknis insertion sort
- dengan metode ini akan memilih data menjadi 2 bagian, bagian data yang sudah rurut dan data yang sudah berurut, kita ambil data yang belum berurut kemudian kita sisipkan kedalam data yang sudah berurut, dilakukan berulang sampai data pada bagian tidakberurut habis

********** Algoritma pada pencarian data
- suatu metode untuk mencari data tertentu pada kumpulan data, misalnya pencarian pad google
- berdasarkan tipe operasi pencarian
1. pencarian sekuemsial : melakukan pengecekan 1 per 1 dar kiri ke kanan, contohnya pencarian linear
2. pencarian interval : metode ini khusu untuk data yang sudah terurut, 
3. pencarian lompat : 

********** Algoritma rekursif
- adalah sutu proses yang memanggil dirinya sendiri

=========================== 4 Mahir menggunakan text editor
==============================================================

********** Apa itu IDE dan Text editor
- text editor adalah program yg mengubah teks secara plain tanpa memiliki format apapun
- Intergrated development environment (IDE) software / aplikasi yang memiliki fasilitas untuk pengembangan software, secara umum IDE memiliki setidaknya source code editor, build automation dan debugger.

********** Instalasi VSCode
1. cari vscode di browser, download sesuai dengan OS pada perangkat 
2. download dan install
- kelebihan visual studio code sala satunya, ada feature terminal untuk menulisakan perintah berupa teks,

********** Fitur VSCode
- cara membuka file ke vsccode
- mimiliki autocomplete
- autosave
- open edtor : mengelompokkan file yang sedang aktif/open 
  * explorer -> open editor

********** Extension Untuk mempermudah proses development
1. Material Icon : utuk mengubah icon
2. live server
3. snippet
4. vscde extension for web developer

=========================== 5 Mahir Menggunakan CMD untuk Dev
==============================================================

********** Pendahuluan
- text based interface/ perintah2 komputer yg kita jalankan melalui command line berupa text
- alasa menggunakan terminal yaitu bisa mempercepat proses yang biasanya kita lakukan secara manual atau GUI, misalnya membuat file

********** Kenapa perlu menggunakan terminal
1. kecepatan/efisiensi waktu
2. akses, memiliki akses langung ke area sistem yang mungkin jarang kita gunakan di GUI.
3. banyak programming tools harus menggunakan cmd, selain lebih ringan karena tidak perlu menggunak CMD
- bash, shell yg palin sering digunakan
- ketik bash pada terminal 

********** Menginstall bash di windows
1. link https://git-scm.com/downloads
2. pilih arsitektur dari OS, dan download
3. bash adalah program yang dijalankan diterminal yg digunakan diberbagai OS, memungkinkan pengguna untuk menjalankan perintah Git di sistem operasi Windows.

********** Mengenal Perintah LS dan PWD
1. ls : list,menmilkan file dan folder dengan reference file yang dibuka
secara default bash tidak akan menampilkan file yang diawalai "titik" jika ingin menmpilkan gunakan perintah "ls -a"
2. clear : membersihkan CMD
3. PWD : Print workig directory, menampilkan path dari file yang digunakan
- menggunakan slash utk memisahkan hierarki file

********** Mengenal Perintah CD (change directory)
- adalah perintah untuk berpindah folder
- autocomplete dengan tombol tab setelah menuliskan beberpa kata depan dari file/folder
1. cd ../ untuk berpidah ke directory 1 level diluar

********** Absolute path dan relative path
- cd ~ : untuk kembali ke directory awal
- path absolute : adalah path lengkap untuk mengakses file tertentu contohnya cd file1/file2/file3.js
- relative path: digunakan etika directory tudak diketahui path-nya, maka menggunakn "cd ../"

********** Perintah Mkdir/ make directory
- adalah perintah untuk membuat folder
- jika ada spasi atau selain perintah alphanumeric maka gunakan backslash "\"
1. mkdir "nama folder", jika ingin 2 folder atau lebih "mkdir nama_folder1 nama_folder2"
2. rm -rf : menghapus folder beserta isinya termasuk subfolder tanpa konfirmasi

********** Mengenal Istilah Flags Atau Parameter Pada Cli
1. ls -la : untuk menampilkan informasi detail dari suatu folder dan file
2. gunakah ls --help untuk melihat semua comad line dari ls 

********** Membuat file dengan perintah touch
- touch nama_file


=========================== 6 GIT Bagian 1
============================================================== Ahmad Oriza
********** Pendahuluan
- adalah sistemo kontrol versi terdistribusi (VCS) yang digunakan untuk melacak peruahan dalam kode sumber selama pengembangan perangkat lunak
- linus torvalds, penemu dan pengembang git
- instalasi git
- git cheat sheet : https://education.github.com/git-cheat-sheet-education.pdf
- new word : onpremise

********** Panduan instalasi GIT
- cari git di browser, pilih OS dan arsitektur yang sesuai

********** Perintah GIT Dasar
- create :
* git init : inisialisasi git di directory
* git clone

- make a change : 
* git add <file>
* git add .
* git commit -m "<message>"
* git reset <file>
* git reset --hard

- Observe
* git status
* git diff
* git show
* git log

- Sync
* git remote add origin <url></url>
* git push
* git pull
* git fetch

- Branch
* git branch
* git checkout
* git merge
* git tag

********** Inisilisasi (init) and clone
1. git init : mwnginisialisasi git 
2. git clone <url> : mengambil file pada remote yang dipublish ke repositori local

********** git add 
1. git add <file> : enambahkan file tertentu
2. git add . : menambahkan semua file

********** git reset
- menghapus perubahan yang sudah dilakukan/ setelah di add, dengan kata lain ifle dikeluarkan lagi dari staging area
- git reset <file>

********** git commit, diff and log
- git commit -m "<message>" : adlaah proses menambahkan penanda pada file yang sudah dimasukkan kedalam staging area sebelum dilakukan push

- git log : perintah untuk meliha riwayat commit yang telah dilakukan pada sebuah repository, serta berisi informasi hash commit, penulis, tanggal dan pesan commit

- git diff : untuk melihat detail perubahna pada suatu file

********** git push
- mengungah file dari repo local ke remote
1. git remote add origin url
2. gi remote -v ; untuk memastikn bahwa repository local sudah terintegrasi dengan remote

********** git pull
- mengunduh file remote ke local repository
- git pull origin main atau master

********** git fetch and branch
- fetch : mengambil data/resource yang ada pada server tanpa mengubah file pada local
- git fetch
- git checkout <nama_branch>
- git branch : untuk cek dibrach mana kita sedang aktif
- git branch -d <nama_branch> : untuk delete branch, kembali ke master sebelum melakukan delete

- branch : adalah percabangan, biasanya ketika endak melakukan penambahan fitur tanpa menggangu file utama

********** git merge
- menggabungkan 2 atau lebih branch

********** GIT Conflict Solve
- accept current change, accept incoming change, accept bothchange, compare change

********** GIT tag
- menandai milestone project degan git tag, seperti versi sebuah file
-  sehingga file yang sudahditandai dengan tag akan berbentuk zip sehingga bisa di unduh
1. git tag -a v1.0 -m "<message>"
2. otomatis akan membuka vim
3. mengetikan message 
4. ketikan kembali perintah "git tag" untuk meliha tag yang sudah dibuat

perintah pada vim
1. i - Masuk ke mode Insert.
2. Ketik pesan yang diinginkan.
3. Esc - Keluar dari mode Insert.
4. :wq - Simpan dan keluar dari Vim.

- ketikkan git push origin --tags : untuk push semua tag kalau hanya ingin push 1 maka "git push origin <nama tag>
- git tag -d <nama_tag> :untuk menghapus tag


=========================== 7 GIT Bagian 2
============================================================== Nusendra
********** Pengenalan GIT
********** Repository dan menambahkan file
1.pengaturan awal git
- git config --global user.name "<username>"
- git config --global user.email "<email>"
- git add . 
- git commit -m "<message>"

********** Mengubah file dan GIT diff
- git diff : untuk melihat perubaha pada file sebelum di add

********** Melihat history dengan git log
- git log : melihat history setelah proses commit dilengkapi informasi detail seperti author, hash commit, tanggal, dan message commit
- hash commit adalah code unik sebagai penanda/identifier sebuah commit
- git log --oneline : history dengan informasi singkat

********** GIT Restore
- membatalkan perubahan sebelum di add .

********** GIT Reset 
- membatalkan perubahan yang sudah ada pada staging area, dengan kata lain mengembalikan lagi dengan working area
- bisa menggunakan git restore -S "<nama_file>"

********** Macam GIT Reset 
1. git reset --hard <hash>: kembali ke commit sebelunya dan menghapus semua perubahan 

2. git reset --mixed : kemmbali ke commit sebelumnya dan file kembali ke wroking directory/ keluar dari staging area

3. git reset --soft : commit terakhir akan dihapus tapi file tetap pada staging area/ siap dicommit

********** Branch and merge
- branch / cabang : menduplikat ifle pada main/master untuk diedit tanpa menggangu file pada main/master
* git checkout -b nama_branch // tanpa petik

- merge : menggabungkan branch
* pastikan kembali ke branch master seblum merging process
* git merge <nama_branch>

********** Merevisi commit
- ada 3 cara merevesi commit 
1. dengan checkout, bersifat temporary dan kurang disarankan
2. reset
3. revert, kembali ke comit sebelumnya tanpa menghapus commit sebelumnya tapi biasanya ada conflict dengan commit terbaru sehingga harus di solve
* git revert --hash

********** Membuat repository di github
- jika sudah login pada github yang pertma harus dilakukan adalah setup SSH key agar komputer local bisa berkomukasi dengan remote dan menghindari hacking code oleh user lain
1. ke menu setting, generate new ssh keys
2. jalankan command berikut (ganti email) : ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
3. ssh-add c:/Users/YOU/.ssh/id_ed25519

********** git clone dan git push
- git clone , membuat salinan lengkap beserta branch, commit dan history

********** git pull request
- permintaan untuk merge code antar author

********** aturan penulisan git commit
1. merge harus spesifik dan dengan message yang jelas
2. berdasarkan conventional commit https://www.conventionalcommits.org/en/v1.0.0/ disarankan ada prefix misalnya fix atau fit
* git commit -m "fix: solve some error at row 1"
* git commit -m "feat : add new function"


=========================== 8 HTML Beginner
============================================================== Ahmad Hakim 

********** Apa itu internet
- sistem jaringan komputer yang saling terhubugn secara global dengan menggunakan paket protokol internet (TCP/IP) 

********** Hubungan WEb dan internet
- http : hypertext transfer protocol adalah protocol web
- http terdiri dari 2 yaitu dari sisi client/user dan server
- client request data, server store or retrieves data
- http request : POST or GET requested connection opened
- http bekerja diatas tcp/ip
- web sebgai wadah untuk melampirkan data

********** FE dan BE
1. FE 
- markup and web language : html, css, javascript
- asynchronous request
- accessibility
- cross browser
- search engine optimization

2. BE 
- Programming and scripting : pythin,  php, java, node.js
- server architecture
- database admnnistration
- scalability
- security
- data transformation
- backup

********** Persiapan software yg dibutuhkan
********** Pengenalan HTML
********** Membuat HTML pertama kali
********** Membuat format paragraf di HTML
- karakteristik paragraf yang kita tulis di file html tidak akan selalu sama dengan yang tampil pada browser

********** Membuat format Heading
- <h1> sampai <h6>, h1 adalah headign terbesar

********** Kerangka utuh element html
- head, title, meta, link, body, footer, script

********** Membuat list didalam HTML
- ol, ul, li, type,

********** Membuat element LINK/Anchor
- <a href="https://google.com">

********** Membuat file gambar di html
********** Element komentar
- <!-- -->
- shortcut = ctrl + /
- hanya tampil pada inspect element
- biasanya hanya utk proses development, ketika ke tahap production sebaiknya dihilangkan/hapus

********** Display block and inline
- div, sebagai element pembungkus beberapa tag/element dan display dari div adalah block
- span, elemnt pembungkus untuk skala yang lebih kecil seperti mengelomponakn teksdan display dari span adalalah inline

********** Element hr, br, sup, sub
- hr : garis horizontal sepanjang baris
- br : enter
- sup : superscript/perpangkatan
- sub : subscript menampilkan format tulisan kecil dibawah garis dasar teks normal

********** Entity Code
- teks string yang diawali dengan ampersand dan diakhiri dengan titik koma https://entitycode.com/
* &copy;, &nbsp;

********** Semantic markup
- syntax yang bermakna

********** Latihan semantic
https://developer.mozilla.org/en-US/docs/Glossary/Semantics
- main : merepresentasikan content utama atau yang lebih dominan didalam body 
- nav : navigasi
- section
- article : merepresentasikan suatu kompoisi konten yang independen dan bisa digunakan ulang
  * article biasanya digunakan untuk sebuah elemen yang memiliki heading dan paragraf, tidak ada aturan baku apakah harus menggunakan section atau article
- aside : informasi yang memiliki porsi yg lebih kecil
- footer 

********** sejarah table di html
- sekarang table sudah jarang digunakan

********** Membuat table sederhana
- property border, cellpadding, csllspasing, width, height, align, bgcolor 
********** thead, tbody, tfoot
********** Colspan, rowspan

********** Form untuk isian formulir
- form adalah element untuk membungkus jenis isian dan tidak memberikan efek tampilan apapun
- isi dari form bisa berupa input, checkbox, search tombol, dll
- form digambarkan sebagai dokumen yang memiliki informasi yang perlu dikirim
- action adalah attribute untuk menentukan alamat tujuan
- method bisa berupa post atau GET

********** membuat inputan
- attribute input : type, id, required, minlength, maxlength,size dll
- input type : https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input

********** Fungsi Label pada judul input
- place holder, keterangan pada suatu input
- place holder tidak bisa diberikan pada semua tipe input, maka gunakan label
- memisahkan input satu dan lainnya : 
  1. dengan tag br
  2. display block, gris, flex dengan direction column
  3. dengan fieldset dan legend
  4. dengan tag p, div
  5 menggunakan dl, dt, dd

********** Button
-  berfungsi untuk mengirimkan data pada formulir kedalam action yang diterapkan
- attribute button : menu, submit, reset, button

********** Attribute Name pada html
- attribute yang digunakan pada input untuk mengirimkan data ke suatu alamat atau server sehingga bisa diidentifikasi 

********** Radio Buttons, checkbox dan select
- gunakan name yang sama untuk menghindari multiple select pada kategori yan sama
- attribute checked untuk pilihan default

- select, option
- attribute selected untuk pilihan default

********** Text area
- atrribute : cols, rows

********** Validasi inputan didalam form
- hanya input yang memenuhi syarat yang bisa dikirim datanya


=========================== 9 CSS (Cascade Style sheet)
============================================================== Ahmad Hakim 

********** Apa itu CSS
- cascade style sheet : mengatur gaya layout dan tampilan visual dari halaman web
- aturan penulisan : 
  * selector {
      property : value;
  }

********** CSS itu luas
- website css :  https://developer.mozilla.org/en-US/docs/Web/CSS/@property

********** Cara menggunakan 
1. dengan inline style
- diterapkan didalam tag sebuah element
- kekurangan inline style : jika kebutuhan akan style banyak maka code tidak clean, dan tidak semua property css bisa digunakan

2. internal styling
- membuat dihalaman yang sama dengan html dan diletakn didalam head html

3. external styling
- memberikan link css didalam element head
- jika bebrapa html memiliki struktur yang sama dan ingin menggunakan style yang sama maka 1 file css bisa diterapkan ke beberapa halaman html

********** Property Color and background
- ada beberapa tipe color diantara : named color, rgba, rgba, hsl, hsla, heksadesimal (#123456)

********** Sistem warna RGB dan HSL
- rgb : red, green and blue
- rgba : a untuk alpha/ transparansi
  * rgba(0, 0, 0, 0.65)
- hsl dan hsla : hue saturation light alpha
- web color html : https://htmlcolorcodes.com/

********** Jangan lupa titik koma
********** property teks
- text-align, font-weight, font-size, font-style, font-family, line-height, letter-spacing, text-decoration

********** Font-size
- satuan size pada website dibagi menjadi 2 yaitu, relative dan absolute
1. relative : ukuran tidak tetap, mengikuti lebar layar yang digunakan
   * em, rem, vh, %, etc
2. absolute : ukuran yang tetap
  * px, pt, cm, in, mm

- jika ingin membuat web yang responsive disarankan menggunakan size relative

********** Selector
- selector : adalah identifier suatu element html
1. universal selector (*) : adalah selector yang mencakup semua element pada body html
2. tag selector (p, h1, input, button)
3. selector id(#)
- id dengan nama yang sama pada satu halaman html hanya boleh 1
- sebaiknya menggunakan 1 id pada satu elemnt html
4. class (.)
- boleh memiliki class dgn nama yang sama pada satu halaman html
- boleh memiliki lebih dari 1 class pada suatu element html

5. descendant selector : 
- digunakan untuk menargetkan elemen yang merupakan keturunan (descendant) dari elemen lain tidak peduli sberapa dalam elemnt tersebut
6. direct descendant and adjacent selector : 
- direct descendant hanya akan memilih selector yang berada 1 level dibawahnya 
  * .directDescendant > p
- adjacent : memilih element yang bersebelahan 
  * a + button
7. attribute selector
- macam attribute selector : https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors
  * input[name="nama"]

********** Pseudo Classes
- kata kunci yang ditambahkan pada selector untuk memili elemnt secara spesifik pada kondisi tertentu
- https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
1. :active 
2. :checked 
3. :first 
4. :hover 
5. :nth-child()
6. nth-of-type(2)

********** Mengenal Pseudo Element
- kata kunci yang ditambahkan pada selector untuk memilih bagian element 
- :after, :before, :first-letter, :first-line :selection
- https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements

********** Box Model
- semua elemnt pada html adalah box
- box model terdiri dari border, margin, padding dan content

********** Border
- garis tepi pada suatu konten
- properti border : width, style, color, radius
- shorthand : border : 2px solid black

********** Padding
- adalah ruang kosong/space antara konten dan border 
- padding tidak bisa diberi niali auto
- shorthand : vertikals horizontal;

********** margin
- adalah ruang kosong atau spasi konten terhadap element pembungkus

********** Display
1. inline : ukuran dari display akan selabar konten, konten baru akan berada diseblahnya
- inline tidak bisa diatur lebarnya
- jika ingin mengubah ukuran element denga tipe inline maka ubah display menjadi inline-block

2. block : area horizontal/baris akan dipenuhi oleh konten sehingga apabila ada konten baru maka akan terletak dibawah

********** Apa itu Flexbox
********** Mengatur urutan element
- main axis : sumbu horizontal
- cross axis : sumbu vertikal
- property : flex-direction

********** Meratakan konten sumbu horizontal
- justify-content ; center, flex-start/end, space-around/between/evenly

********** Menampilkan elemen dengan ukuran sebenarnya
- flex-wrap : kontan akan berpindah posisi jika ruang tidak sesuai dengan dimensi dari konten

********** Rata sumbu vertikal
- align item

********** Mengatur jarak cross align
- align-content : hanya beraku ketika contnt lebih dari 1 baris mislanya dengan flex-wrap
- align-self, justify-self

********** Mengubah ukuran element flex
- flex-sizing propeprties
1. flex-basis : mendefenisikan nilai awal dari elent yang ada didalam flex sesuai dengan directionnya
2. flex-grow : mengatur jumlah space element yg tersedia pada pembungkusnya
3. flex-shrink : jika elemnt lebih besar dari containernya, maka mereka akan mengecil sesuai dengan nilai yang diberikan

********** shorthand
- flex-grow, flex-shrink, flex-basis

********** responsive Design dan Media Query
- mentarget spesifik ukuran media pada device tertentu

********** membuat Responsive navigation
- min-width
- max-width

********** Membuat tabel Pricing
-


=========================== 10 Bootstrap
============================================================== Ahmad Hakim 

********** Pendahuluan
- bootstrap adalah framework css
- https://getbootstrap.com/docs/5.3/getting-started/introduction/

********** Cara Pakai 
1. Include the <meta name="viewport"> tag as well for proper responsive behavior in mobile devices.
2. Include Bootstrap css and js
- css link in head : 
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

- script link before last of body : 
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>

3. Container
- container-fluid

********** Button
- btn btn-primary/secondary/success/link/info/danger/warning/link
- btn btn-outline-primary/secondary/...etc

4. Typography dan kebutuhna lainnya
- https://getbootstrap.com/docs/5.3/content/typography/
- bisa customazi ukuran dari element dengan kode h1-h6 atau dengan display-1/2/.../6
  * <p class="h1">h1. Bootstrap heading</p>
  * <h1 class="display-1">Display 1</h1>
- Inline text elements
  <p>You can use the mark tag to <mark>highlight</mark> text.</p>
  <p><del>This line of text is meant to be treated as deleted text.</del></p>
  <p><s>This line of text is meant to be treated as no longer accurate.</s></p>
  <p><ins>This line of text is meant to be treated as an addition to the document.</ins></p>
  <p><u>This line of text will render as underlined.</u></p>
  <p><small>This line of text is meant to be treated as fine print.</small></p>
  <p><strong>This line rendered as bold text.</strong></p>
  <p><em>This line rendered as italicized text.</em></p>

- blockquote
- utilities
  * display : flex, inline, block,

********** Badge, Alert, Button Group
- badge : biasanya digunakan untuk jumlah notifikasi pada pesan 
- button-group : btn btn-group-sm

********** Sistem grid
- container, row, col 
- jumlah colom pada bootstrap adalah  12
- freepik : https://www.freepik.com/
- utilities bisa ditambahkan untuk memanipulasi element yang sudah memiliki karakteristik/behavior sendiri misalnya span yang memiliki dispaly default yaitu inline, 
dengan ditambhakna d-block maka span akan memiliki karakteristik block

********** Mendesain form dengan bootstrap
- attribute : form-label, form-control, form-text

********** Navbar
- class="navbar-toggler", navbar-expand-lg, data-bs-target, data-bs-toggle, fixed-top, id

********** Fungsi lain yang dimiliki Bootstrap
- dengan cdn :  
  * <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
- Bootstrap Icon : <i class="bi bi-airplane"></i>
- utility border


********** Studi Kasus
1. Museum Arkeologi 
- menmbahkanlibrary jquery
- navbar
- google font
- img-fluid L akan membuat gambar memenuhi element pembungku dan bersifat responsive
- order




=========================== 11 javascript
============================================================== Ahmad Hakim 
1. Tipe data primitif dan developer tools console
- beberapa data primitif : number, string, boolean, null, undefined

2 tipe data number
- berbeda dengan bahasa pemrogrman kebanyakan pada javascript semua jenis bilangan numerik dikelompokan menjadi satu tipe data yang sama
- eksponensial/perpangakatan = **;

3. apa itu nilai Nan : adalah value yang merepresentasikan selain angka namun bertipe data number
- misalnya 1 + Nan => Nan

4. variabel dan kata kunci let
- variabel bisa diasumsikan sebagai wadah yg bisa menyimpan nilai dengan tipe data masing2
- aturan membuat variabel
    1. tidak boleh diawali angka
    2. tidak boleh menggunkan karakter unik selain underscore dan $
    3. tidak boleh mengandung spasi
    4. case sensitive
    5. reversed keyword : tidak boleh memberi nama yang sudah menjadi perintah khusus javascript seperti if, var, else, function dll
    6. camalcase : aturan pemulisan jika variabel merupukan gabungan 2 kata atau lebih 
    - contoh : namaSaya,
    7. Descriptive naming

5. Memperbarui Nilai Number Di Dalam Variabel
- ++, ==, += 

6. kata kunci const dan var
- const adalah variabel yang nilainya tidak bisa diubah/ konstan
- const melindungi referensi terhadap pengubahan, tetapi tidak melindungi nilai di dalam referensi tersebut jika itu adalah objek atau array.
- var adalah jenis variabel yang sudah jarang digunakan karena mereferensi ke variabel global

7. tipe data boolean 
- bernilai true or false
- pahami nilai truty and falsy

8. mengenal tipe data string
- tipe data string adalah kumpulan karakter yang dibungkus oleh tanda kutip
- tanda kutip bisa berupa single quote, double quote atau backtick tergantung kondisi dan kebutuhan

9. index dan length pada string
- index dimulai dari 0 dan lenght sesuai dengan banyak data
- concat : menggabungkan beberapa data 
- eksplisti anda implisit conversion

10. method string javascript 
- toUpperCase, toLowerCase, trim(), 
- charAt(index)
- charCodeAt(index);
- concat, includes(), indexOf(substring), split, repeat, replace

11. Argumen dan parameter

12. template literal
- dengan backtick (``) dan untuk memanggil nilai suatu variabel maka tambahkan ${namaVariabel} didalam backtick

13.mengenal null dan undefined
- null biasanya suatu value yang sengaja dibuat untuk diisi
- undefined variabel yang dibuat tanpa value atau variabel yang belum ada

14. object Math
- Math.random():
- Math.round() : pembulatan terdekat
- Math.ceil() : pembulatan keatas
- Math.floor() : pembulatan kebawah
- Math.PI : 3.14
- Math.E : 2.71
- Math.abs(value) : nilai absolute

15. Logika boolean
16. Operator javascript
- macam operator pada js : 
  * operator aritmatika : +, -, *, **, /, %, ++, --
  * operator perbandingan : ==, === (memperhatikan tipe data), !=, !==, >, <, >=, <=
  * operator logika : &&, ||, !
  * operator penugasan : =, +=, -=, *=, /=, %=, **=
  * operator bitwise : &: AND
    |: OR
    ^: XOR
    ~: NOT
    <<: Shift kiri
    >>: Shift kanan (mempertahankan tanda)
    >>>: Shift kanan (tanpa tanda)
    (let a = 5; // 0101 dalam biner
    let b = 3; // 0011 dalam biner
    console.log(a & b); // Output: 1 (0001 dalam biner)
    )
  * operator ternary 
    a > b ? true : false
  * operator string : +=, +
  * operator type : typeof, instanceof
  * Operator Lainnya
      delete: Menghapus properti dari objek.
      in: Memeriksa apakah properti ada di dalam objek.
      void: Mengevaluasi ekspresi tanpa mengembalikan nilai.
      new: Membuat instance dari objek.
      this: Mengacu pada objek saat ini.
      super: Mengacu pada objek induk, biasanya digunakan dalam kelas

17. console alert dan prompt 
- console.log, console.warning, console.error, console.dir
- let name = prompt("What is your name?");

18. menjalankan javascript
- penempatan script ada didalam body dan ada yg didalam head

19. if, else, else if statement
20. cek kondisi berlapis
21. operator logic and
22. switch : alternatif if else namun ada beberapa kekurangan

23. structure data Array 
- adalah structure data yang bisa menmpung banyak data dengan tipe yang sama atau berbeda
- medapatkan nilai dari index
- memanipulasi nilai array

24. method array
- push, pop, concat, shift, unshift, slice, splice, map, find, filter, sort, forEach, reduce, reverse, join, split
* push : menambhakan data diakhir index dari array
* pop : menhapus data index terakhir dari array
* shift : mengapush data index pertama dari array
* unshift : menmbahkan data index pertam daru array
* concat : merge 2 array atau lebih
* indexOf : untuk melihat nomor index dari sebuah data jika tidak ada akan mengembalikan nilai -1
* includes : melihat apakah suatu array memiliki data tertentu, maka akan mnegmbalikan true/false
* sort : pengurutan data array 
  - value.localeCompare(value)
* splice : method untuk menghilngkan, menggantikan nilai dari suatu index Array
  - value.splice(0,3,"fahmi","hidayat) : berarti menghilangkan index 0 dan 3 data didepannya digantikan dengan "fahmi" dan "hidayat"
* slice : mengembalikan array baru tanpa mengubah array asli, sedangkan splice mengembalikan array  baru dan merubah array asli

25. Mengubah nilai const dengan array 
- pada array dan object nilai suatu array yg sudah di assign dengan const tetap bisa diubah

26. Array multidimensi / nested array / array bersarang
- data = [2,3,[4,5,6],"fahmi",["hidayat",2,3,8,9,10]]

27. Apa itu object
- adalah sekumpulan properties yang terdiri dari key dan value
- mengakses dengan custom keys

28. structure of object data
- bisa menampung array atau bahkan onject lagi didalamnya

29.  memanggil data dari object
* dataFahmi = {
  name : "fahmi",
  age : 25,
  homeTown : "Belitung Timur",
}

- cara memanggil dengan titik : dataFahmi.name
- jika merupakan sebuah iterasi maka dengan cara berikut : dataFahmi["name"]

30. cara memanipulasi object
31. cara memanggil object didalam array
- memanggil index dari array dan jika data didalmnya adalah object maka akses dgn cara 

32.  Perulangan / Looping
- melakukan operasi yang sama secara berulang sebanyak data atau kondisi
- tipe perulangan : for, for...of, for...in, while, do while
- infinite loops : perulangan tanpa batas
- mendapatkan data dari array dari perulangan 
- nested loop : perulangan bersarang

33. perulangan dengan while
- perulangan yang akan terus berulang berdasarkan konsisi yang ditentukan

34. Break untuk memberhentikan perulagan
35. Tebak angka dengan while
36. perulagan dengan for of
    - perulangan untuk mendapatkan value tanpa menginputkan nilai index

37. Perulangan dengan for in
   - perulangan untuk object

38. function pada javascript
- function adalah blok kode yang memiliki intruksi khusus, bmemudahkan mengoragnisir kode dan pengulangan kode

39. Cara mendefenisikan dan memanggil function
- function namaFungsi(){}
- arrow function : const namaFungsi = () => {}

40. argumen dan parameter
- argumen adalah varibel yang diberikan ketika memanggil sebuah function
- parameter adalah variabel yang nilainnya merupakan refensi dari argumen yang diberikan

41. Multiparameter dan argumen
42. statement return pada function
- return akan mnegakhiri suatu prosesn dan mengembalikan nilai 

43. scope variabel
- global, function, block scope
- var adalah variabel yang tidak memiliki blockinh scope sehinggan nilainya dapat berubah2

44. Function Expression
45. function sebagai argumen function lain
* 
      function chances2(fungsi) {
          console.log(fungsi());
          console.log(fungsi());
      }

      function throwDice(){
          let nilai = Math.round(Math.random() * 5) + 1; // Perbaiki pembulatan dan skala
          return nilai;
      }

      console.log(chances2(throwDice));


46. function bernilai balik function
- closure 
  * 
    function hitung() {
    let count = 0;

    return function () {
      count += 1;
      return count;
    };
    return count;
    }

    let hitung1 = hitung();
    console.log(hitung1());
    console.log(hitung1());

47. definisi sebuah method
48. keyword this
- adalah variabel yang digunakan untuk mengakses variabel scope dari objek yang sama
* const fahmi = {
  nama: "fahmi hidayat",
  usia: 25,
  asal: "bangka belitung",
  kenalan: function (nama) {
      console.log(`hai nama saya ${this.nama} atau ${nama}`);
    },
  };

  fahmi.kenalan("leo");

49. Try and catch
- ketika ada error atau kesalahan proses maka program akan tetap berjalan dan kesalahan akan ditampilkan
* try {
  console.log(`nama saya adalah ${nama}`);
  } catch (err) {
  console.log(err.message);
  }


50. forEach method
- forEach tidak mengembalikan nilai
- forEach akan secara otomatis meneruskan 3 argumen, contoh
  * function print(element, index, array) {
    console.log(element);
    console.log(index);
    console.log(array);
    }

    arrayAngka.forEach(print);

51. map method
- map mengembalikan nilai
- nilai baliknya adalah array baru yang sudah dimodifikasi

52. Arrow function
-  const perkalian = (angka) => { return angka * angka };
- return implisit : yaitu tanpa menuliskan return syaratnya jika instruksi didalm function sederhana/ 1 baris dan tanpa kurung kurawal
* const random = () => Math.random() * 1000;
* const addition = (a, b) => a + b;

53. setTimeout dan setInterval
- setTimeout program akan dijalankan setelah waktu yang ditentukan
- setInterval, akan mengeksekusi berulang sesuai dengan waktu yang ditentukan
- clearInterval : untuk mengehntikan setInterval yang berjalan 
* const intervalX = setInterval(() => {
  console.log(Math.random());
  }, 1000);

  setTimeout(() => {
  clearInterval(intervalX);
  }, 5000);

54. filter method
55. Every some method
- every akan mnegembalikan nilai boolean, mencakup semua elment 
- some juga akan mengembalikan nilai boolean, jika ada salah satu atau semua maka kan bernilai true

56. reduce
- terdiri dari 2 parameter utama yaitu accumulator dan current value, adapaun variabel lainnya adalah curent index, source array, initial value

57. scope this
- jika menggunakan arrow function maka this akan merefernsi ke window bukan pada scope induknya

58. mengatur default value pada function
59. Spread operator
* const arrayAngka = [1,2,3,4,5];
  const spreadOperator = (...arrayAngka)

60. menggabungkan array dan object
* const arrayAngka = [1, 2, 3, 4, 5, 6, 7, 8];
  const arrayNama = ["fahmi", "hidayat", "leo", "chsris", "khabib"];

  const mix = [...arrayAngka, ...arrayNama];
  console.log(mix);

* const dataFahmi = {
  nama: "Fahmi Hidayat",
  usia: 25,
  asal: "Bangka Belitung",
  }
  const updateData = { ...dataFahmi, alamat: "Batam" };

61. Rest parameter
62. destructuring
- membongkar/unpack array dan obejxt menjadi singular variabel
  * const winner = ["fahmi", "hidayat", "leo", "thomas", "ali", "chris"];
    const [gold, ...lainnya] = winner;

  * const winnerData = {
    name: "Fahmi Hidayat",
    age: 25,
    country: "Indonesia",
    };

    const { name } = winnerData;

- berbeda dangan destructuring array yang bisa memubuat instance baru dari data index yang dibuat, maka pada object harus membuat dengan nama yang sama dengan nama properti dari object
- jika ingin merubah maka buat alias : 
  * const { name: nameDie } = winnerData;

- destructuring object didalam function 
  * const userData = ({ name }) => {
    console.log(name);
    };
   userData(winnerData);



=========================== 12 OOP Javascript
============================================================== Ahmad 
1. Perkenalan prototype js
-  membuat instance baru di Array.prototype
   * Array.prototype.bonjour = () => {
    return `bonjour fahmi`;
    };

    const arrayBaru = [1, 2, 3, 4];
    console.log(arrayBaru.bonjour());

- override methode yang sudah ada
  * Array.prototype.pop = () => {
    return `method di nonaktifkan`;
    };

    console.log(arrayBaru.pop());
    console.log(arrayBaru);

2. Membuat object dengan factory function
* function convertColor (r,g,b) {
  const color = {};
  color.r = r;
  color.g = g;
  color.b = b;

  color.rgb = function(){
  return `rgb(${this.r},${this.g},${this.b})`;
  }

  color.hex = function(){
  const {r, g, b} = this
  return `#` + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  }
  return color;
  }

  console.log(convertColor(100,80,90).rgb());
  console.log(convertColor(100,80,90).hex());



3. membuat object dengan constructor function
-  menggunakan keyword new untuk membuat instance baru,
- new akan membuat objeck kosong dan berada didalam berada di prototype yg seakan2 instance tersebut di registrasi ke build in prototype javascript
- kelebihan menggunkaan contructor function ketimbang factory function yaitu, javascript tidak membuat instance/object baru 
- jika ada perubahahn pada prototype maka instance akan mereferensi ke global


4. Object dengan class
5. OOP, Extends, super
- extends adalah pewarisan sifat2 dari kelas induk/parent ke children


=========================== 13 Javascript asyncronous
============================================================== Ahmad 
1. Mengenal call stack function
- mekanisme memory javascript/ bagaimana interpreter eksekusi sebuah code
- bagaiman flow function dipanggil
- python tutor for visualize : https://pythontutor.com/render.html#mode=display

2. Javascript single thread
- javascript sesungguhnya dibaca secara sikronus / menjalankan satu proses dalam satu waktu
- karena browser engine base c++ program sehingga code javascript bisa dijalankan secara multi thread dengan menggunakan beberapa fungsi pendukung

3. callBack Hell
- cara alternatif untuk mengganti callback function yaitu promise
- promise adalah cara menghandle fail dalam menjalankan intruksi atau mengambil data

4. latihan request dengan callback function
- promise adalah object dari suatu function yang dijalankan dan memiliki kembalian baik gagal 
  atau berhasil tanpa menyebabkan browser error
- const requestCallback = (url, success, failure) => {}

5. latihan request dengan promise
- cara unutk menghandle suatu proses atau function
- outputnya adalah object baik prosesnya gagal atau berhasil
- adalah solusi untuk mengatasi callback Hell
* const requestPromise = (url) => {
  return new Promise((resolve, reject) => {
    const delay = Math.floor(Math.random() * 3000);
    setTimeout(()=>{
        if(delay <= 2000){
            resolve("Success fetching data");
        }
        else{
            reject("Failed fetching data")
        }
    }, delay)
  })
  }

  requestPromise("google.com");

- cara efektif menggunakan promise
- cara membuat promise


6. Async keyword
- didalam asynchronous ada 2 keyword yitu async dan await
- jika kita terapkan async pada function maka function akan menjadi promise secara instan
- sehingga apabila sudah menjadi promise maka akan akan menghasilkan resolve yang datanya bisa diolah
- jika didalam function ada object throw error, akak akan menjalankan bagian reject

* const hello2 = async () => {
    throw `maaf gak kenal`
    return `Hello world`
}

hello2().then((res)=> {
    console.log('response',res)
}).catch((err) => {
    console.log('Error : ', err);
})


6. Await keyword
- keyword await hanya bisa diekseskusi oleh function yang memiliki await
- await akan melakukan jeda proses selanjutnya didalam function, menunggu promise yang dijalankan resolve

7. handle error pada async await
- denga try and catch sehugga apabial suatu proses error/fail maka program akan tetap berjalan dengan menampilkan pesan error


=========================== 14 Javascript DOM
============================================================== Ahmad 
1. Apa itu DOM 
- document object model, sebuah representasi dari struktur dokumen html dalam bentuk tree oleh javascript
- DOM memiliki struktur hierarkis, dimana setiap element dokumen merupakan child node dari element lain atau root node
- documen adalah level tertinggi dari hierarki sebuah element html
- dom hanya bekerja didalam browser
- console.dir untuk melihat informasi apa yng dimiliki sebuah obejct html
- document.all[nomor index]

2. DOM Selection dengan ID
- node.getElementById("Id_name")
- menghasilkan elemnt

3. DOM selection dengan Classes
- parentNode.getElemntById("")[nomor index]
- menghasilkan html collection





======= Last materi
https://dashboard.codepolitan.com/learn/courses/belajar-javascript-dom/lessons/8289

* resume Web : https://docs.google.com/spreadsheets/d/1gBgcYDhjnQXr5n7GhQFQEtNe9Fm76SC7_jPwB9LwFUw/edit?gid=0#gid=0

* germany
https://www.youtube.com/playlist?list=PL5QyCnFPRx0GxaFjdAVkx7K9TfEklY4sg